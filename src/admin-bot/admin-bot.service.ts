import { HttpException, Injectable, Logger } from '@nestjs/common'
import { UserRole } from '@prisma/client'
import { Action, Command, Ctx, Help, Start, Update } from 'nestjs-telegraf'
import { RestaurantsService } from 'src/restaurants/restaurants.service'
import { Context, Markup } from 'telegraf'
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram'
import { UsersService } from '../users/users.service'
import { CallbackQueryContext } from './types/admin-bot.types'

@Update()
@Injectable()
export class AdminBotService {
	private readonly logger = new Logger(AdminBotService.name)

	constructor(
		private readonly usersService: UsersService,
		private readonly restaurantsService: RestaurantsService
	) {}

	private async isAdmin(telegramUserId: number): Promise<boolean> {
		const user = await this.usersService.findOneByTelegramUserId(
			telegramUserId.toString()
		)

		return user?.role === UserRole.ADMIN
	}

	private getMainMenuKeyboard(): Markup.Markup<InlineKeyboardMarkup> {
		return Markup.inlineKeyboard([
			[Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏', 'restaurants_menu')],
			[Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', 'users_menu')],
			[Markup.button.callback('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'show_profile')],
		])
	}

	private getRestaurantsMenuKeyboard(): Markup.Markup<InlineKeyboardMarkup> {
		return Markup.inlineKeyboard([
			[Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤', 'list_restaurants')],
			[Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'create_restaurant')],
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
		])
	}

	private getSingleRestaurantMenuKeyboard(
		restaurantId: string
	): Markup.Markup<InlineKeyboardMarkup> {
		return Markup.inlineKeyboard([
			[
				Markup.button.callback(
					'‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
					`edit_restaurant:${restaurantId}`
				),
			],
			[Markup.button.callback('üçî –£–ø—Ä. –º–µ–Ω—é', `manage_menu:${restaurantId}`)],
			[Markup.button.callback('ü§ñ –£–ø—Ä. –±–æ—Ç–æ–º', `manage_bot:${restaurantId}`)],
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'list_restaurants')],
		])
	}

	private getUsersMenuKeyboard(): Markup.Markup<InlineKeyboardMarkup> {
		return Markup.inlineKeyboard([
			[Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'confirm_payment_start')],
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
		])
	}

	@Start()
	@Help()
	async onStart(@Ctx() ctx: Context) {
		if (!ctx.from) return
		if (await this.isAdmin(ctx.from.id)) {
			await ctx.reply(
				'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
				this.getMainMenuKeyboard()
			)
		} else {
			await ctx.reply(
				'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.'
			)
		}
	}

	@Action('main_menu')
	async onMainMenu(@Ctx() ctx: CallbackQueryContext) {
		try {
			await ctx.editMessageText(
				'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
				this.getMainMenuKeyboard()
			)
		} catch (error) {
			this.logger.warn(
				`Could not edit message for main_menu: ${String(error)}.`
			)
		}

		await ctx.answerCbQuery()
	}

	@Action('restaurants_menu')
	async onRestaurantsMenu(@Ctx() ctx: CallbackQueryContext) {
		try {
			await ctx.editMessageText(
				'–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏:',
				this.getRestaurantsMenuKeyboard()
			)
		} catch (error) {
			this.logger.warn(
				`Could not edit message for restaurants_menu: ${String(error)}.`
			)
		}

		await ctx.answerCbQuery()
	}

	@Action('list_restaurants')
	async onListRestaurants(@Ctx() ctx: CallbackQueryContext) {
		if (!ctx.from || !(await this.isAdmin(ctx.from.id))) {
			return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
		}

		const restaurants = await this.restaurantsService.findAll()

		if (restaurants.length === 0) {
			await ctx.editMessageText(
				'–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.',
				Markup.inlineKeyboard([
					[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'restaurants_menu')],
				])
			)

			return ctx.answerCbQuery()
		}

		const buttons = restaurants.map(r =>
			Markup.button.callback(r.name, `view_restaurant:${r.id}`)
		)

		const keyboard = Markup.inlineKeyboard([
			...buttons.map(btn => [btn]),
			[Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'restaurants_menu')],
		])

		try {
			await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', keyboard)
		} catch (error) {
			this.logger.error(
				`Failed to edit message with restaurant list: ${String(error)}`
			)

			await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫.')
		}

		await ctx.answerCbQuery()
	}

	@Action(/^view_restaurant:(.+)$/)
	async onViewRestaurant(
		@Ctx() ctx: CallbackQueryContext & { match: RegExpExecArray }
	) {
		if (!ctx.from || !(await this.isAdmin(ctx.from.id))) {
			return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
		}

		const restaurantId = ctx.match[1]

		try {
			const restaurant = await this.restaurantsService.findOne(restaurantId)

			const message = `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º: ${this.escapeMarkdown(
				restaurant.name
			)}*
				ID: \`${restaurant.id}\`
				–°—Ç–∞—Ç—É—Å: ${restaurant.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
				Email: ${this.escapeMarkdown(restaurant.contactEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω')}
				–¢–µ–ª–µ—Ñ–æ–Ω: ${this.escapeMarkdown(restaurant.contactPhone || '–Ω–µ —É–∫–∞–∑–∞–Ω')}`

			await ctx.editMessageText(message, {
				parse_mode: 'MarkdownV2',
				...this.getSingleRestaurantMenuKeyboard(restaurantId),
			})
		} catch (error) {
			if (error instanceof HttpException && error.getStatus() === 404) {
				await ctx.editMessageText(
					'–û—à–∏–±–∫–∞: –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.',
					Markup.inlineKeyboard([
						[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'list_restaurants')],
					])
				)
			} else {
				this.logger.error(`Error fetching restaurant ${restaurantId}:`, error)

				await ctx.editMessageText(
					'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.'
				)
			}
		}

		await ctx.answerCbQuery()
	}

	@Action('users_menu')
	async onUsersMenu(@Ctx() ctx: CallbackQueryContext) {
		await ctx.editMessageText(
			'–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:',
			this.getUsersMenuKeyboard()
		)

		await ctx.answerCbQuery()
	}

	@Action('show_profile')
	async onShowProfile(@Ctx() ctx: CallbackQueryContext) {
		if (!ctx.from) {
			await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

			return
		}

		await this.replyWithWhoAmI(ctx)
		await ctx.answerCbQuery()
	}

	@Command('whoami')
	async onWhoAmICommand(@Ctx() ctx: Context) {
		if (!ctx.from) return

		await this.replyWithWhoAmI(ctx)
	}

	private async replyWithWhoAmI(ctx: Context | CallbackQueryContext) {
		if (!ctx.from) return

		const fromId = ctx.from.id
		const user = await this.usersService.findOneByTelegramUserId(
			fromId.toString()
		)

		let message = ''

		if (user && user.role === UserRole.ADMIN) {
			message = `*–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ ADMIN*
				Email: ${this.escapeMarkdown(user.email || '–Ω–µ —É–∫–∞–∑–∞–Ω')}
				Telegram ID: \`${user.telegramUserId}\``
		} else if (user) {
			message = `*–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ —É –≤–∞—Å —Ä–æ–ª—å ${user.role}, –∞ –Ω–µ ADMIN*
				Telegram ID: \`${user.telegramUserId}\``
		} else {
			message = `*–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ*
				–í–∞—à Telegram ID: \`${fromId}\``
		}

		try {
			if (ctx.updateType === 'callback_query') {
				await ctx.editMessageText(message, {
					parse_mode: 'MarkdownV2',
					reply_markup: {
						inline_keyboard: [
							[Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')],
						],
					},
				})
			} else {
				await ctx.reply(message, { parse_mode: 'MarkdownV2' })
			}
		} catch (error) {
			this.logger.error(
				`Failed to reply/edit in replyWithWhoAmI: ${String(error)}`
			)

			await ctx.reply(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:'
			)

			await ctx.reply(message, { parse_mode: 'MarkdownV2' })
		}
	}

	private escapeMarkdown(text: string): string {
		const escapeChars = [
			'_',
			'*',
			'[',
			']',
			'(',
			')',
			'~',
			'`',
			'>',
			'#',
			'+',
			'-',
			'=',
			'|',
			'{',
			'}',
			'.',
			'!',
		]

		return text
			.split('')
			.map(char => (escapeChars.includes(char) ? '\\' + char : char))
			.join('')
	}
}
